//
//  HappensKitName.swift
//  Happens
//
//  Created by Happens, Inc.  on 9/25/15.
//  Copyright (c) 2015 Happens. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class HappensKitName : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfExit: UIImage?
        static var exitTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawWritePost(writeHighlighted writeHighlighted: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let primary = UIColor(red: 0.173, green: 0.243, blue: 0.314, alpha: 1.000)
        let primaryHighlighted = UIColor(red: 0.260, green: 0.344, blue: 0.413, alpha: 0.683)
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.27)
        shadow.shadowOffset = CGSizeMake(1.1, 1.1)
        shadow.shadowBlurRadius = 1

        //// Circle Drawing
        var circlePath = UIBezierPath(ovalInRect: CGRectMake(2, 2, 46, 46))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        primary.setFill()
        circlePath.fill()
        CGContextRestoreGState(context)



        if (writeHighlighted) {
            //// Circle 2 Drawing
            var circle2Path = UIBezierPath(ovalInRect: CGRectMake(2, 2, 46, 46))
            primaryHighlighted.setFill()
            circle2Path.fill()
        }


        //// Horizontal Line Drawing
        var horizontalLinePath = UIBezierPath()
        horizontalLinePath.moveToPoint(CGPointMake(24.5, 14.5))
        horizontalLinePath.addLineToPoint(CGPointMake(24.5, 34.5))
        horizontalLinePath.lineCapStyle = CGLineCap.Square;

        horizontalLinePath.lineJoinStyle = CGLineJoin.Round;

        cloud.setStroke()
        horizontalLinePath.lineWidth = 3
        horizontalLinePath.stroke()


        //// Vertical Line Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, -15, 25)
        CGContextRotateCTM(context, 90 * CGFloat(M_PI) / 180)

        var verticalLinePath = UIBezierPath()
        verticalLinePath.moveToPoint(CGPointMake(-0, -30))
        verticalLinePath.addLineToPoint(CGPointMake(-0, -50))
        verticalLinePath.lineCapStyle = CGLineCap.Square;

        cloud.setStroke()
        verticalLinePath.lineWidth = 3
        verticalLinePath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawExit() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 23, 23))
        cloud.setStroke()
        ovalPath.lineWidth = 2.5
        ovalPath.stroke()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(17, 8))
        bezierPath.addLineToPoint(CGPointMake(8, 17))
        cloud.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()


        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(17, 8))
        bezier2Path.addLineToPoint(CGPointMake(8, 17))
        cloud.setStroke()
        bezier2Path.lineWidth = 2.5
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 17, 8)
        CGContextRotateCTM(context, 90 * CGFloat(M_PI) / 180)

        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(9, 0))
        bezier3Path.addLineToPoint(CGPointMake(0, 9))
        cloud.setStroke()
        bezier3Path.lineWidth = 2.5
        bezier3Path.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawScrollUp(slideUpHighlighted slideUpHighlighted: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let primary = UIColor(red: 0.173, green: 0.243, blue: 0.314, alpha: 1.000)
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.27)
        shadow.shadowOffset = CGSizeMake(1.1, 1.1)
        shadow.shadowBlurRadius = 1

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 47, 47))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        UIColor.whiteColor().setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)



        if (slideUpHighlighted) {
            //// Oval Highlight Drawing
            var ovalHighlightPath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 47, 47))
            cloud.setFill()
            ovalHighlightPath.fill()
        }


        //// Rectangle Drawing
        var rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(16, 31))
        rectanglePath.addLineToPoint(CGPointMake(33, 31))
        rectanglePath.addLineToPoint(CGPointMake(24, 17))
        rectanglePath.addLineToPoint(CGPointMake(16, 31))
        rectanglePath.closePath()
        primary.setFill()
        rectanglePath.fill()
    }

    public class func drawTakePhoto(takeHighlight takeHighlight: Bool) {
        //// Color Declarations
        let primary = UIColor(red: 0.173, green: 0.243, blue: 0.314, alpha: 1.000)
        let primaryHighlighted = UIColor(red: 0.260, green: 0.344, blue: 0.413, alpha: 0.683)
        let color5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(2, 1, 77, 77))
        color5.setStroke()
        ovalPath.lineWidth = 1.5
        ovalPath.stroke()


        //// Circle Drawing
        var circlePath = UIBezierPath(ovalInRect: CGRectMake(9, 8, 63, 63))
        primary.setFill()
        circlePath.fill()
        primaryHighlighted.setStroke()
        circlePath.lineWidth = 12
        circlePath.stroke()


        if (takeHighlight) {
            //// Circle 2 Drawing
            var circle2Path = UIBezierPath(ovalInRect: CGRectMake(15, 14, 51, 51))
            primaryHighlighted.setFill()
            circle2Path.fill()
        }
    }

    public class func drawUseImage() {
        //// Color Declarations
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)
        let color8 = UIColor(red: 0.180, green: 0.800, blue: 0.443, alpha: 1.000)

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(4, 4, 72, 72))
        color8.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(28, 40))
        bezierPath.addLineToPoint(CGPointMake(37.6, 52))
        bezierPath.addLineToPoint(CGPointMake(52, 28))
        bezierPath.lineCapStyle = CGLineCap.Round;

        bezierPath.lineJoinStyle = CGLineJoin.Round;

        cloud.setStroke()
        bezierPath.lineWidth = 8
        bezierPath.stroke()
    }

    public class func drawRetakeImage() {
        //// Color Declarations
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)
        let color9 = UIColor(red: 0.753, green: 0.224, blue: 0.169, alpha: 1.000)

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(4, 4, 72, 72))
        color9.setFill()
        ovalPath.fill()


        //// Bezier 3 Drawing
        var bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(28, 28))
        bezier3Path.addLineToPoint(CGPointMake(50.59, 52))
        bezier3Path.moveToPoint(CGPointMake(29.41, 52))
        bezier3Path.addLineToPoint(CGPointMake(52, 28))
        bezier3Path.lineCapStyle = CGLineCap.Round;

        cloud.setStroke()
        bezier3Path.lineWidth = 8
        bezier3Path.stroke()
    }

    public class func drawPointIndicatorInside() {
        //// Color Declarations
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)

        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(15, 15, 30, 30))
        cloud.setStroke()
        oval2Path.lineWidth = 4
        oval2Path.stroke()
    }

    public class func drawPointIndicatorOutSide() {
        //// Color Declarations
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(5, 5, 49.5, 49.5))
        cloud.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()
    }

    public class func drawActivity() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Activity Outside Ring Drawing
        var activityOutsideRingPath = UIBezierPath()
        activityOutsideRingPath.moveToPoint(CGPointMake(89, 50))
        activityOutsideRingPath.addCurveToPoint(CGPointMake(50, 11), controlPoint1: CGPointMake(89, 28.46), controlPoint2: CGPointMake(71.54, 11))
        activityOutsideRingPath.addCurveToPoint(CGPointMake(11, 50), controlPoint1: CGPointMake(28.46, 11), controlPoint2: CGPointMake(11, 28.46))
        activityOutsideRingPath.addCurveToPoint(CGPointMake(50, 89), controlPoint1: CGPointMake(11, 71.54), controlPoint2: CGPointMake(28.46, 89))
        activityOutsideRingPath.addCurveToPoint(CGPointMake(89, 50), controlPoint1: CGPointMake(71.54, 89), controlPoint2: CGPointMake(89, 71.54))
        activityOutsideRingPath.closePath()
        activityOutsideRingPath.lineCapStyle = CGLineCap.Round;

        activityOutsideRingPath.lineJoinStyle = CGLineJoin.Round;

        UIColor.whiteColor().setStroke()
        activityOutsideRingPath.lineWidth = 10
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 0, [62, 61], 2)
        activityOutsideRingPath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawActivityInsideRing() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Activity Outside Ring 2 Drawing
        var activityOutsideRing2Path = UIBezierPath()
        activityOutsideRing2Path.moveToPoint(CGPointMake(75, 50))
        activityOutsideRing2Path.addCurveToPoint(CGPointMake(50, 25), controlPoint1: CGPointMake(75, 36.19), controlPoint2: CGPointMake(63.81, 25))
        activityOutsideRing2Path.addCurveToPoint(CGPointMake(25, 50), controlPoint1: CGPointMake(36.19, 25), controlPoint2: CGPointMake(25, 36.19))
        activityOutsideRing2Path.addCurveToPoint(CGPointMake(50, 75), controlPoint1: CGPointMake(25, 63.81), controlPoint2: CGPointMake(36.19, 75))
        activityOutsideRing2Path.addCurveToPoint(CGPointMake(75, 50), controlPoint1: CGPointMake(63.81, 75), controlPoint2: CGPointMake(75, 63.81))
        activityOutsideRing2Path.closePath()
        activityOutsideRing2Path.lineCapStyle = CGLineCap.Round;

        activityOutsideRing2Path.lineJoinStyle = CGLineJoin.Round;

        UIColor.whiteColor().setStroke()
        activityOutsideRing2Path.lineWidth = 10
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 87, [40, 44], 2)
        activityOutsideRing2Path.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawRefreshActivityInside() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)

        //// Oval 2 Drawing
        var oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(29, 19.5))
        oval2Path.addCurveToPoint(CGPointMake(20.5, 11), controlPoint1: CGPointMake(29, 14.81), controlPoint2: CGPointMake(25.19, 11))
        oval2Path.addCurveToPoint(CGPointMake(12, 19.5), controlPoint1: CGPointMake(15.81, 11), controlPoint2: CGPointMake(12, 14.81))
        oval2Path.addCurveToPoint(CGPointMake(20.5, 28), controlPoint1: CGPointMake(12, 24.19), controlPoint2: CGPointMake(15.81, 28))
        oval2Path.addCurveToPoint(CGPointMake(29, 19.5), controlPoint1: CGPointMake(25.19, 28), controlPoint2: CGPointMake(29, 24.19))
        oval2Path.closePath()
        oval2Path.lineCapStyle = CGLineCap.Round;

        oval2Path.lineJoinStyle = CGLineJoin.Round;

        cloud.setStroke()
        oval2Path.lineWidth = 4
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 0, [15, 11], 2)
        oval2Path.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawRefreshActivityOutside() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let cloud = UIColor(red: 0.897, green: 0.902, blue: 0.903, alpha: 1.000)

        //// Oval Drawing
        var ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPointMake(37, 20))
        ovalPath.addCurveToPoint(CGPointMake(20, 3), controlPoint1: CGPointMake(37, 10.61), controlPoint2: CGPointMake(29.39, 3))
        ovalPath.addCurveToPoint(CGPointMake(3, 20), controlPoint1: CGPointMake(10.61, 3), controlPoint2: CGPointMake(3, 10.61))
        ovalPath.addCurveToPoint(CGPointMake(20, 37), controlPoint1: CGPointMake(3, 29.39), controlPoint2: CGPointMake(10.61, 37))
        ovalPath.addCurveToPoint(CGPointMake(37, 20), controlPoint1: CGPointMake(29.39, 37), controlPoint2: CGPointMake(37, 29.39))
        ovalPath.closePath()
        ovalPath.lineCapStyle = CGLineCap.Round;

        ovalPath.lineJoinStyle = CGLineJoin.Round;

        cloud.setStroke()
        ovalPath.lineWidth = 4
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 0, [15, 11], 2)
        ovalPath.stroke()
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfWritePost(writeHighlighted writeHighlighted: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            HappensKitName.drawWritePost(writeHighlighted: writeHighlighted)

        let imageOfWritePost = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfWritePost
    }

    public class var imageOfExit: UIImage {
        if Cache.imageOfExit != nil {
            return Cache.imageOfExit!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 25), false, 0)
            HappensKitName.drawExit()

        Cache.imageOfExit = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfExit!
    }

    public class func imageOfScrollUp(slideUpHighlighted slideUpHighlighted: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            HappensKitName.drawScrollUp(slideUpHighlighted: slideUpHighlighted)

        let imageOfScrollUp = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfScrollUp
    }

    public class func imageOfTakePhoto(takeHighlight takeHighlight: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(80, 80), false, 0)
            HappensKitName.drawTakePhoto(takeHighlight: takeHighlight)

        let imageOfTakePhoto = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfTakePhoto
    }

    //// Customization Infrastructure

    @IBOutlet var exitTargets: [AnyObject]! {
        get { return Cache.exitTargets }
        set {
            Cache.exitTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(HappensKitName.imageOfExit)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
